name: Build and Deploy Flask App

on:
  push:
    branches: [ "add-workflow-dispatch" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: [self-hosted]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-k8-app:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/flask-k8-app:latest

 # Set up Helm CLI
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.13.1  # or latest stable

    # Create kubeconfig file from GitHub Secret (accepts raw or base64, supports two secret names)
    - name: Configure kubeconfig
      env:
        K8S_PRIMARY: ${{ secrets.KUBECONFIG }}
        K8S_FALLBACK: ""
      run: |
        # prefer K8S_PRIMARY secret, fall back to K8S_FALLBACK
        if [ -n "$K8S_PRIMARY" ]; then
          VAL="$K8S_PRIMARY"
        elif [ -n "$K8S_FALLBACK" ]; then
          VAL="$K8S_FALLBACK"
        else
          echo "Neither KUBECONFIG nor KUBE_CONFIG secret is set. Please add one to your repository secrets."
          exit 1
        fi

        OUT_FILE="${{ github.workspace }}/kubeconfig.yaml"

        # Detect base64: try to decode; if decode works, use it, otherwise write raw value
        if echo "$VAL" | base64 --decode >/dev/null 2>&1; then
          echo "$VAL" | base64 --decode > "$OUT_FILE"
        else
          echo "$VAL" > "$OUT_FILE"
        fi

        chmod 600 "$OUT_FILE"
        export KUBECONFIG="$OUT_FILE"
        echo "Wrote kubeconfig to $OUT_FILE"
        # print the API server endpoint for debugging (non-secret)
        kubectl --kubeconfig="$OUT_FILE" config view -o jsonpath='{.clusters[0].cluster.server}' || true
    - name: Validate cluster access
      run: |
        kubectl cluster-info
    # Delete existing deployment
    - name: Delete existing Deployment
      run: |
        kubectl delete deployment/flask-app --namespace default --ignore-not-found

    # Deploy with Helm
    - name: Helm Upgrade & Install
      run: |
        helm upgrade --install flask-app ./helm/helm-chart \
          --namespace default \
          --values ./helm/helm-chart/values.yaml
    
    #verify deployment
    #verify deployment
    - name: Verify Deployment
      run: |
        kubectl rollout status deployment/flask-app --namespace default
