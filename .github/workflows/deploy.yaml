name: Build and Deploy Flask App

on:
  push:
    branches: [ "add-workflow-dispatch" ]
  workflow_dispatch:

jobs:
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use Node 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend deps
        working-directory: ./frontend
        run: |
          if [ -f package-lock.json ]; then npm ci --legacy-peer-deps; else npm install; fi

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Prepare static artifact
        working-directory: ./frontend
        run: |
          echo "Copying built frontend files from backend/static to ./static for artifact upload"
          # Ensure a ./static folder exists at repo root then copy build output there
          rm -rf ./static || true
          mkdir -p ./static
          # backend/static is the Vite outDir in this repo; copy its contents into artifact path
          if [ -d ../backend/static ]; then
            cp -a ../backend/static/. ./static/
          else
            echo "Warning: ../backend/static not found â€” make sure Vite outDir is correct"
          fi

      - name: Upload static artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: frontend-static
          path: ./static

  build-and-deploy:
    name: Build & Deploy Backend
    runs-on: [self-hosted]
    needs: build-frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download frontend static
        uses: actions/download-artifact@v4
        with:
          name: frontend-static
          path: .

      - name: Place frontend artifact in repo root
        run: |
          echo "Ensuring frontend static files are at ./static"
          if [ -d ./frontend-static/static ]; then
            mv ./frontend-static/static ./static
          elif [ -d ./frontend-static ]; then
            # Move all files from artifact root into repo root
            mv ./frontend-static/* . || true
            # If static exists inside moved files, normalize location
            if [ -d ./static ]; then
              echo "static directory ready"
            fi
          else
            echo "No frontend-static artifact directory found; continuing"
          fi

      - name: Debug workspace before build
        run: |
          echo "Workspace listing:"; ls -la
          echo "Find any static directories:"; find . -maxdepth 3 -type d -name static -print || true
          echo "Contents of ./static (if present):"; ls -la ./static || true

      - name: Move frontend static into backend/static
        run: |
          if [ -d ./static ]; then
            echo "Creating backend/static and moving built frontend files into it"
            mkdir -p backend/static
            # Move all files from artifact static into backend/static
            cp -a ./static/. backend/static/ || true
            echo "backend/static now contains:"; ls -la backend/static || true
          else
            echo "No ./static directory found in workspace; ensure frontend build produced ./static"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.backend
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKER_USERNAME }}/flask-k8-app:latest
          build-args: |
            BUILDER_BASE=ghcr.io/${{ github.repository_owner }}/flask-k8-app-builder:latest
          cache-from: |
            type=gha
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/flask-k8-app-builder:latest
          cache-to: type=gha,mode=max

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.1

      - name: Configure kubeconfig
        env:
          K8S_PRIMARY: ${{ secrets.KUBECONFIG }}
          K8S_FALLBACK: ""
        run: |
          if [ -n "$K8S_PRIMARY" ]; then
            VAL="$K8S_PRIMARY"
          elif [ -n "$K8S_FALLBACK" ]; then
            VAL="$K8S_FALLBACK"
          else
            echo "Neither KUBECONFIG nor KUBE_CONFIG secret is set. Add one to repository secrets."
            exit 1
          fi

          OUT_FILE="${{ github.workspace }}/kubeconfig.yaml"

          if echo "$VAL" | base64 --decode >/dev/null 2>&1; then
            echo "$VAL" | base64 --decode > "$OUT_FILE"
          else
            echo "$VAL" > "$OUT_FILE"
          fi

          chmod 600 "$OUT_FILE"
          echo "Wrote kubeconfig to $OUT_FILE"
          kubectl --kubeconfig="$OUT_FILE" config view -o jsonpath='{.clusters[0].cluster.server}' || true

      - name: Validate cluster access
        run: kubectl cluster-info || true

      - name: Delete existing Deployment
        run: kubectl delete deployment/flask-app --namespace default --ignore-not-found || true

      - name: Helm Upgrade & Install
        run: |
          helm upgrade --install flask-app ./helm/helm-chart \
            --namespace default \
            --values ./helm/helm-chart/values.yaml

      - name: Verify Deployment
        run: kubectl rollout status deployment/flask-app --namespace default

      - name: Run smoke tests (port-forward + curl)
        run: |
          set -e
          KUBECONFIG_PATH="${{ github.workspace }}/kubeconfig.yaml"
          echo "Using kubeconfig: $KUBECONFIG_PATH"
          # Port-forward the deployment to localhost
          kubectl --kubeconfig="$KUBECONFIG_PATH" port-forward deployment/flask-app 8080:5000 >/tmp/port-forward.log 2>&1 &
          PF=$!
          # Give port-forward a moment to start
          sleep 4
          echo "Checking GET /"
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8080/ || true)
          echo "GET / returned HTTP $STATUS"
          if [ "$STATUS" != "200" ] && [ "$STATUS" != "304" ]; then
            echo "GET / failed; dumping port-forward logs:"; cat /tmp/port-forward.log; kill $PF; exit 1
          fi

          echo "Checking POST /api/upload"
          RESP=$(curl -s -X POST -F "serials=TEST1\nTEST2" http://127.0.0.1:8080/api/upload || true)
          echo "Response: $RESP"
          echo "$RESP" | grep -q 'img_base64' || (echo "Smoke test failed: img_base64 not found"; cat /tmp/port-forward.log; kill $PF; exit 1)
          # Clean up port-forward
          kill $PF || true
